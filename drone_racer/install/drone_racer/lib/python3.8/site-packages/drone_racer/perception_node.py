import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2


class PerceptionNode(Node):
    def __init__(self):
        super().__init__('perception_node')
        self.bridge = CvBridge()

        self.image_sub = self.create_subscription(
            Image,
            '/drone1/image_raw',  # Gazebo camera topic
            self.image_callback,
            10
        )

        self.get_logger().info('Perception node started.')

    def image_callback(self, msg):
        frame = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        cv2.imshow("Camera", frame)
        cv2.waitKey(1)


def main(args=None):
    rclpy.init(args=args)
    node = PerceptionNode()
    rclpy.spin(node)
    node.destroy_node()
    cv2.destroyAllWindows()
    rclpy.shutdown()
if __name__ == '__main__':
    main()
# This code is a simple ROS2 node that subscribes to the camera image topic from Gazebo and displays the images using OpenCV.
# It uses the cv_bridge package to convert ROS image messages to OpenCV images.
# The node is initialized, and a subscription is created to listen for image messages on the specified topic.
# The image_callback function is called whenever a new image message is received, and it converts the message to an OpenCV image and displays it in a window.
# The node is then spun to keep it running and listening for messages.  